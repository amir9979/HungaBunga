# This is a basic workflow to help you get started with Actions

name: extract_all

# Controls when the action will run. 
on:

  # Allows you to run this workflow manually from the Actions tab

  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    steps:
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install numpy 
            pip install scipy
            pip install joblib
            pip install scikit-learn 
            pip install tabulate   
            pip install pandas
            pip install pytest
            pip install tqdm
        - name: add all valids to one file
          shell: python
          run: |
              import json
              import os
              import csv
              import http.client
              import pandas as pd
              os.mkdir("res_dir")
              all_data = []
              for issue_number in [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109]:
                conn = http.client.HTTPSConnection("api.github.com")
                conn.request("GET","/repos/amir9979/HungaBunga/issues/{0}/comments".format(issue_number), "", {"User-Agent":"amir9979" , "Accept":"application/vnd.github.v3+json", "Authorization":"token ${{ secrets.GITHUB_TOKEN }}"})
                response = list(map(lambda x: x['body'], json.loads(conn.getresponse().read())))
                total_data = []
                for x in response:
                  try:
                    a, b = x.splitlines()
                    a = a[a.index('{'):]
                    print('a', a)
                    print('b', b)
                    params = json.loads(a)
                    score = json.loads(b)
                    params.update(score)
                    total_data.append(params)
                    all_data.append(json.loads(b))
                  except Exception as e:
                    raise e
              pd.DataFrame(all_data).to_csv(r"res_dir\results.csv", index=False)
              with open(r"res_dir\results.json", "w") as f:
                json.dump(total_data, f)
        
        
        - name: Upload results
          if: ${{ always() }}
          uses: actions/upload-artifact@v2
          with:
            # Artifact name
            name: res_dir
            # A file, directory or wildcard pattern that describes what to upload
            path: res_dir
